

version: '3.0'

services:


  discovery-service:
    container_name: discovery-service
    image: discovery-service
    ports:
      - "8761:8761"
    build:
      context: ./discovery-service
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring

  api-gateway:
    image: api-gateway
    restart: on-failure
    ports:
      - "8000:8000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    container_name: api-gateway
    depends_on:
      - discovery-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring

  keycloak:
    image: jboss/keycloak
    restart: on-failure
    ports:
      - "8080:8080"
    container_name: keycloak
    depends_on:
      - postgres-keycloak
    environment:
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/realms/spring-social2-realm.json
    volumes:
      - ./realms/:/opt/jboss/keycloak/realms
    networks:
      - spring

  postgres-keycloak:
    image: postgres
    restart: unless-stopped
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=keycloak
    volumes:
      - ./data/postgres/postgres-keycloak:/data/postgres
    container_name: postgres-keycloak
    networks:
      - spring

  user-service:
    image: user-service # from build in Dockerfile created in terminal; :1.0 is version specified
    ports:
      - "8082:8082" # 8082 internal: 8082 external
    build: #
      context: ./user-service
      dockerfile: ./Dockerfile
      # if the code has changed, recreate the image before building the container
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-user
    networks:
      - spring

  post-service:
      image: post-service
      ports:
        - "8083:8083"
      build: #
        context: ./post-service
        dockerfile: ./Dockerfile
      container_name: post-service
      restart: on-failure
      environment:
        SPRING_PROFILES_ACTIVE: docker
      links:
        - mongodb
      depends_on:
        - mongodb
      networks:
        - spring

  comment-service:
    image: comment-service # from build in Dockerfile created in terminal; :1.0 is version specified
    ports:
      - "8087:8087" # 8082 internal: 8082 external
    build: #
      context: ./comment-service
      dockerfile: ./Dockerfile
      # if the code has changed, recreate the image before building the container
    container_name: comment-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-comment
    networks:
      - spring

  postgres-comment:
    image: postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/postgres/comment-service:/var/lib/postgresql/data
      - ./init/postgres/comment-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgres-comment
    networks:
      - spring

  postgres-user:
    image: postgres
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/postgres/user-service:/var/lib/postgresql/data
      - ./init/postgres/user-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: postgres-user
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    ports:
      - "8888:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    container_name: pgadmin
    networks:
      - spring

  mongodb:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: rootadmin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/users:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    container_name: mongodb
    command: mongod --auth # d stands for daemon
    networks:
      - spring

#  mongo-express:
#    image: mongo-express:latest
#    restart: unless-stopped
#    ports:
#      - "8081:8081"
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: rootadmin
#      ME_CONFIG_MONGODB_ADMINPASSWORD: password
#      ME_CONFIG_MONGODB_SERVER: mongodb
#    depends_on:
#      - mongodb
#    networks:
#      - spring

networks:
  spring:
    driver: bridge

